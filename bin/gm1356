#!/usr/bin/ruby
# frozen_string_literal: true

require 'optparse'
require_relative '../lib/gm1356'

options = {}

def get_device(options)
  device = nil
  loop do
    device = GM1356::Device.new(options)
    break
  rescue NoMethodError
    next
  end
  return device
end

OptionParser.new do |opts|
  opts.banner = 'Usage: gm1356 [options]'

  opts.on('-fFILTER', '--filter=FILTER', String, 'A/C filter') do |f|
    options[:filter] = :a if f.downcase == 'a'
    options[:filter] = :c if f.downcase == 'c'
  end

  opts.on('-sSPEED', '--speed=SPEED', String, 'SLOW/FAST mode') do |s|
    options[:speed] = :slow if ['slow', 's'].include? s.downcase
    options[:speed] = :fast if ['fast', 'f'].include? s.downcase
  end

  opts.on('-mBOOLEAN', '--max=BOOLEAN', TrueClass, 'enable/disable MAX mode') do |m|
    options[:max_mode] = m
  end

  opts.on('-rINTEGER', '--range=INTEGER', Integer, 'measured levels range ') do |l|
    options[:max_mode] = l if (0..4).include? l
  end

  opts.on('--just-set', TrueClass, 'just set options and exit') do
    options[:just_set] = true
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

device = get_device(options)

begin
  device.read do |record|
    print record.to_s
    print "\n"
  rescue NoMethodError
    next
  rescue LIBUSB::Error
    device = get_device(options)
    next
  end
rescue LIBUSB::Error, HIDAPI::HidApiError
  device = get_device(options)
  retry
rescue Exception # rubocop:disable Lint/RescueException
  device.close
  raise
end unless options[:just_set]

device.close
